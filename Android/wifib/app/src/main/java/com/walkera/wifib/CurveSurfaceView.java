package com.walkera.wifib;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;

public class CurveSurfaceView extends SurfaceView implements Callback {
    static int CURVE_POINT_MAX;
    static int CURVE_POINT_NUM;
    static int DUAL_RATE_DEF;
    static int[] EXP_TABLE;
    static boolean HelmExp;
    static int[] THRO_CURVE_XPOS;
    static int VALID_MAX;
    static boolean[] ch_en;
    static boolean[] ch_ens;
    static float[] ch_out;
    static float[] ch_outs;
    static int count;
    static boolean elevhelm;
    static boolean expOn;
    static boolean expSOn;
    static int fix;
    static int f0h;
    static int h0;
    static int helm_adjustb;
    static int helm_adjusts;
    static int helm_max;
    static int helm_min;
    static Paint paint;
    static float scales;
    static boolean screwpitch;
    static boolean throhelm;
    static int f1w;
    static int w0;
    static int xhalf;
    static int xleft;
    static int xright;
    static int ybottom;
    static int yhalf;
    static int ytop;

    static {
        count = 0;
        paint = null;
        elevhelm = true;
        helm_max = 100;
        helm_min = 100;
        helm_adjustb = 0;
        helm_adjusts = 0;
        VALID_MAX = 1600;
        CURVE_POINT_NUM = 7;
        CURVE_POINT_MAX = 100;
        DUAL_RATE_DEF = 100;
        HelmExp = true;
        throhelm = false;
        expOn = false;
        boolean[] zArr = new boolean[7];
        zArr[0] = true;
        zArr[3] = true;
        zArr[6] = true;
        ch_en = zArr;
        ch_out = new float[]{-100.0f, -66.5f, -33.5f, 0.0f, 33.5f, 66.5f, 100.0f};
        screwpitch = false;
        expSOn = false;
        zArr = new boolean[7];
        zArr[0] = true;
        zArr[3] = true;
        zArr[6] = true;
        ch_ens = zArr;
        ch_outs = new float[]{-100.0f, -67.0f, -33.0f, 0.0f, 33.0f, 66.0f, 100.0f};
        scales = 0.0f;
        int[] iArr = new int[1601];
        iArr[1] = 1;
        iArr[2] = 2;
        iArr[3] = 3;
        iArr[4] = 5;
        iArr[5] = 6;
        iArr[6] = 7;
        iArr[7] = 9;
        iArr[8] = 10;
        iArr[9] = 11;
        iArr[10] = 13;
        iArr[11] = 14;
        iArr[12] = 15;
        iArr[13] = 17;
        iArr[14] = 18;
        iArr[15] = 19;
        iArr[16] = 21;
        iArr[17] = 22;
        iArr[18] = 23;
        iArr[19] = 25;
        iArr[20] = 26;
        iArr[21] = 27;
        iArr[22] = 29;
        iArr[23] = 30;
        iArr[24] = 32;
        iArr[25] = 33;
        iArr[26] = 34;
        iArr[27] = 36;
        iArr[28] = 37;
        iArr[29] = 38;
        iArr[30] = 40;
        iArr[31] = 41;
        iArr[32] = 43;
        iArr[33] = 44;
        iArr[34] = 45;
        iArr[35] = 47;
        iArr[36] = 48;
        iArr[37] = 50;
        iArr[38] = 51;
        iArr[39] = 53;
        iArr[40] = 54;
        iArr[41] = 55;
        iArr[42] = 57;
        iArr[43] = 58;
        iArr[44] = 60;
        iArr[45] = 61;
        iArr[46] = 63;
        iArr[47] = 64;
        iArr[48] = 66;
        iArr[49] = 67;
        iArr[50] = 68;
        iArr[51] = 70;
        iArr[52] = 71;
        iArr[53] = 73;
        iArr[54] = 74;
        iArr[55] = 76;
        iArr[56] = 77;
        iArr[57] = 79;
        iArr[58] = 80;
        iArr[59] = 82;
        iArr[60] = 83;
        iArr[61] = 85;
        iArr[62] = 86;
        iArr[63] = 88;
        iArr[64] = 89;
        iArr[65] = 91;
        iArr[66] = 92;
        iArr[67] = 94;
        iArr[68] = 95;
        iArr[69] = 97;
        iArr[70] = 98;
        iArr[71] = 100;
        iArr[72] = 102;
        iArr[73] = 103;
        iArr[74] = 105;
        iArr[75] = 106;
        iArr[76] = 108;
        iArr[77] = 109;
        iArr[78] = 111;
        iArr[79] = 112;
        iArr[80] = 114;
        iArr[81] = 116;
        iArr[82] = 117;
        iArr[83] = 119;
        iArr[84] = 120;
        iArr[85] = 122;
        iArr[86] = 124;
        iArr[87] = 125;
        iArr[88] = 127;
        iArr[89] = 128;
        iArr[90] = 130;
        iArr[91] = 132;
        iArr[92] = 133;
        iArr[93] = 135;
        iArr[94] = 137;
        iArr[95] = 138;
        iArr[96] = 140;
        iArr[97] = 141;
        iArr[98] = 143;
        iArr[99] = 145;
        iArr[100] = 146;
        iArr[101] = 148;
        iArr[102] = 150;
        iArr[103] = 151;
        iArr[104] = 153;
        iArr[105] = 155;
        iArr[106] = 156;
        iArr[107] = 158;
        iArr[108] = 160;
        iArr[109] = 161;
        iArr[110] = 163;
        iArr[111] = 165;
        iArr[112] = 167;
        iArr[113] = 168;
        iArr[114] = 170;
        iArr[115] = 172;
        iArr[116] = 173;
        iArr[117] = 175;
        iArr[118] = 177;
        iArr[119] = 179;
        iArr[120] = 180;
        iArr[121] = 182;
        iArr[122] = 184;
        iArr[123] = 186;
        iArr[124] = 187;
        iArr[125] = 189;
        iArr[126] = 191;
        iArr[127] = 193;
        iArr[128] = 194;
        iArr[129] = 196;
        iArr[130] = 198;
        iArr[131] = 200;
        iArr[132] = 201;
        iArr[133] = 203;
        iArr[134] = 205;
        iArr[135] = 207;
        iArr[136] = 209;
        iArr[137] = 210;
        iArr[138] = 212;
        iArr[139] = 214;
        iArr[140] = 216;
        iArr[141] = 218;
        iArr[142] = 220;
        iArr[143] = 221;
        iArr[144] = 223;
        iArr[145] = 225;
        iArr[146] = 227;
        iArr[147] = 229;
        iArr[148] = 231;
        iArr[149] = 232;
        iArr[150] = 234;
        iArr[151] = 236;
        iArr[152] = 238;
        iArr[153] = 240;
        iArr[154] = 242;
        iArr[155] = 244;
        iArr[156] = 246;
        iArr[157] = 248;
        iArr[158] = 249;
        iArr[159] = 251;
        iArr[160] = 253;
        iArr[161] = 255;
        iArr[162] = 257;
        iArr[163] = 259;
        iArr[164] = 261;
        iArr[165] = 263;
        iArr[166] = 265;
        iArr[167] = 267;
        iArr[168] = 269;
        iArr[169] = 271;
        iArr[170] = 273;
        iArr[171] = 275;
        iArr[172] = 277;
        iArr[173] = 279;
        iArr[174] = 281;
        iArr[175] = 282;
        iArr[176] = 284;
        iArr[177] = 286;
        iArr[178] = 288;
        iArr[179] = 290;
        iArr[180] = 292;
        iArr[181] = 294;
        iArr[182] = 297;
        iArr[183] = 299;
        iArr[184] = 301;
        iArr[185] = 303;
        iArr[186] = 305;
        iArr[187] = 307;
        iArr[188] = 309;
        iArr[189] = 311;
        iArr[190] = 313;
        iArr[191] = 315;
        iArr[192] = 317;
        iArr[193] = 319;
        iArr[194] = 321;
        iArr[195] = 323;
        iArr[196] = 325;
        iArr[197] = 327;
        iArr[198] = 329;
        iArr[199] = 332;
        iArr[200] = 334;
        iArr[201] = 336;
        iArr[202] = 338;
        iArr[203] = 340;
        iArr[204] = 342;
        iArr[205] = 344;
        iArr[206] = 346;
        iArr[207] = 349;
        iArr[208] = 351;
        iArr[209] = 353;
        iArr[210] = 355;
        iArr[211] = 357;
        iArr[212] = 359;
        iArr[213] = 362;
        iArr[214] = 364;
        iArr[215] = 366;
        iArr[216] = 368;
        iArr[217] = 370;
        iArr[218] = 372;
        iArr[219] = 375;
        iArr[220] = 377;
        iArr[221] = 379;
        iArr[222] = 381;
        iArr[223] = 384;
        iArr[224] = 386;
        iArr[225] = 388;
        iArr[226] = 390;
        iArr[227] = 393;
        iArr[228] = 395;
        iArr[229] = 397;
        iArr[230] = 399;
        iArr[231] = 402;
        iArr[232] = 404;
        iArr[233] = 406;
        iArr[234] = 408;
        iArr[235] = 411;
        iArr[236] = 413;
        iArr[237] = 415;
        iArr[238] = 418;
        iArr[239] = 420;
        iArr[240] = 422;
        iArr[241] = 425;
        iArr[242] = 427;
        iArr[243] = 429;
        iArr[244] = 432;
        iArr[245] = 434;
        iArr[246] = 436;
        iArr[247] = 439;
        iArr[248] = 441;
        iArr[249] = 443;
        iArr[250] = 446;
        iArr[251] = 448;
        iArr[252] = 451;
        iArr[253] = 453;
        iArr[254] = 455;
        iArr[255] = 458;
        iArr[256] = 460;
        iArr[257] = 463;
        iArr[258] = 465;
        iArr[259] = 468;
        iArr[260] = 470;
        iArr[261] = 472;
        iArr[262] = 475;
        iArr[263] = 477;
        iArr[264] = 480;
        iArr[265] = 482;
        iArr[266] = 485;
        iArr[267] = 487;
        iArr[268] = 490;
        iArr[269] = 492;
        iArr[270] = 495;
        iArr[271] = 497;
        iArr[272] = 500;
        iArr[273] = 502;
        iArr[274] = 505;
        iArr[275] = 507;
        iArr[276] = 510;
        iArr[277] = 512;
        iArr[278] = 515;
        iArr[279] = 517;
        iArr[280] = 520;
        iArr[281] = 523;
        iArr[282] = 525;
        iArr[283] = 528;
        iArr[284] = 530;
        iArr[285] = 533;
        iArr[286] = 536;
        iArr[287] = 538;
        iArr[288] = 541;
        iArr[289] = 543;
        iArr[290] = 546;
        iArr[291] = 549;
        iArr[292] = 551;
        iArr[293] = 554;
        iArr[294] = 557;
        iArr[295] = 559;
        iArr[296] = 562;
        iArr[297] = 565;
        iArr[298] = 567;
        iArr[299] = 570;
        iArr[300] = 573;
        iArr[301] = 575;
        iArr[302] = 578;
        iArr[303] = 581;
        iArr[304] = 583;
        iArr[305] = 586;
        iArr[306] = 589;
        iArr[307] = 592;
        iArr[308] = 594;
        iArr[309] = 597;
        iArr[310] = 600;
        iArr[311] = 603;
        iArr[312] = 605;
        iArr[313] = 608;
        iArr[314] = 611;
        iArr[315] = 614;
        iArr[316] = 616;
        iArr[317] = 619;
        iArr[318] = 622;
        iArr[319] = 625;
        iArr[320] = 628;
        iArr[321] = 631;
        iArr[322] = 633;
        iArr[323] = 636;
        iArr[324] = 639;
        iArr[325] = 642;
        iArr[326] = 645;
        iArr[327] = 648;
        iArr[328] = 651;
        iArr[329] = 653;
        iArr[330] = 656;
        iArr[331] = 659;
        iArr[332] = 662;
        iArr[333] = 665;
        iArr[334] = 668;
        iArr[335] = 671;
        iArr[336] = 674;
        iArr[337] = 677;
        iArr[338] = 680;
        iArr[339] = 683;
        iArr[340] = 686;
        iArr[341] = 689;
        iArr[342] = 692;
        iArr[343] = 695;
        iArr[344] = 698;
        iArr[345] = 701;
        iArr[346] = 704;
        iArr[347] = 707;
        iArr[348] = 710;
        iArr[349] = 713;
        iArr[350] = 716;
        iArr[351] = 719;
        iArr[352] = 722;
        iArr[353] = 725;
        iArr[354] = 728;
        iArr[355] = 731;
        iArr[356] = 734;
        iArr[357] = 737;
        iArr[358] = 740;
        iArr[359] = 743;
        iArr[360] = 746;
        iArr[361] = 750;
        iArr[362] = 753;
        iArr[363] = 756;
        iArr[364] = 759;
        iArr[365] = 762;
        iArr[366] = 765;
        iArr[367] = 768;
        iArr[368] = 772;
        iArr[369] = 775;
        iArr[370] = 778;
        iArr[371] = 781;
        iArr[372] = 784;
        iArr[373] = 788;
        iArr[374] = 791;
        iArr[375] = 794;
        iArr[376] = 797;
        iArr[377] = 800;
        iArr[378] = 804;
        iArr[379] = 807;
        iArr[380] = 810;
        iArr[381] = 814;
        iArr[382] = 817;
        iArr[383] = 820;
        iArr[384] = 823;
        iArr[385] = 827;
        iArr[386] = 830;
        iArr[387] = 833;
        iArr[388] = 837;
        iArr[389] = 840;
        iArr[390] = 843;
        iArr[391] = 847;
        iArr[392] = 850;
        iArr[393] = 853;
        iArr[394] = 857;
        iArr[395] = 860;
        iArr[396] = 864;
        iArr[397] = 867;
        iArr[398] = 870;
        iArr[399] = 874;
        iArr[400] = 877;
        iArr[401] = 881;
        iArr[402] = 884;
        iArr[403] = 888;
        iArr[404] = 891;
        iArr[405] = 895;
        iArr[406] = 898;
        iArr[407] = 901;
        iArr[408] = 905;
        iArr[409] = 908;
        iArr[410] = 912;
        iArr[411] = 915;
        iArr[412] = 919;
        iArr[413] = 923;
        iArr[414] = 926;
        iArr[415] = 930;
        iArr[416] = 933;
        iArr[417] = 937;
        iArr[418] = 940;
        iArr[419] = 944;
        iArr[420] = 948;
        iArr[421] = 951;
        iArr[422] = 955;
        iArr[423] = 958;
        iArr[424] = 962;
        iArr[425] = 966;
        iArr[426] = 969;
        iArr[427] = 973;
        iArr[428] = 977;
        iArr[429] = 980;
        iArr[430] = 984;
        iArr[431] = 988;
        iArr[432] = 991;
        iArr[433] = 995;
        iArr[434] = 999;
        iArr[435] = 1003;
        iArr[436] = 1006;
        iArr[437] = 1010;
        iArr[438] = 1014;
        iArr[439] = 1018;
        iArr[440] = 1021;
        iArr[441] = 1025;
        iArr[442] = 1029;
        iArr[443] = 1033;
        iArr[444] = 1037;
        iArr[445] = 1040;
        iArr[446] = 1044;
        iArr[447] = 1048;
        iArr[448] = 1052;
        iArr[449] = 1056;
        iArr[450] = 1060;
        iArr[451] = 1064;
        iArr[452] = 1067;
        iArr[453] = 1071;
        iArr[454] = 1075;
        iArr[455] = 1079;
        iArr[456] = 1083;
        iArr[457] = 1087;
        iArr[458] = 1091;
        iArr[459] = 1095;
        iArr[460] = 1099;
        iArr[461] = 1103;
        iArr[462] = 1107;
        iArr[463] = 1111;
        iArr[464] = 1115;
        iArr[465] = 1119;
        iArr[466] = 1123;
        iArr[467] = 1127;
        iArr[468] = 1131;
        iArr[469] = 1135;
        iArr[470] = 1139;
        iArr[471] = 1143;
        iArr[472] = 1147;
        iArr[473] = 1151;
        iArr[474] = 1156;
        iArr[475] = 1160;
        iArr[476] = 1164;
        iArr[477] = 1168;
        iArr[478] = 1172;
        iArr[479] = 1176;
        iArr[480] = 1180;
        iArr[481] = 1185;
        iArr[482] = 1189;
        iArr[483] = 1193;
        iArr[484] = 1197;
        iArr[485] = 1201;
        iArr[486] = 1206;
        iArr[487] = 1210;
        iArr[488] = 1214;
        iArr[489] = 1218;
        iArr[490] = 1223;
        iArr[491] = 1227;
        iArr[492] = 1231;
        iArr[493] = 1235;
        iArr[494] = 1240;
        iArr[495] = 1244;
        iArr[496] = 1248;
        iArr[497] = 1253;
        iArr[498] = 1257;
        iArr[499] = 1261;
        iArr[500] = 1266;
        iArr[501] = 1270;
        iArr[502] = 1275;
        iArr[503] = 1279;
        iArr[504] = 1283;
        iArr[505] = 1288;
        iArr[506] = 1292;
        iArr[507] = 1297;
        iArr[508] = 1301;
        iArr[509] = 1306;
        iArr[510] = 1310;
        iArr[511] = 1315;
        iArr[512] = 1319;
        iArr[513] = 1324;
        iArr[514] = 1328;
        iArr[515] = 1333;
        iArr[516] = 1337;
        iArr[517] = 1342;
        iArr[518] = 1346;
        iArr[519] = 1351;
        iArr[520] = 1356;
        iArr[521] = 1360;
        iArr[522] = 1365;
        iArr[523] = 1369;
        iArr[524] = 1374;
        iArr[525] = 1379;
        iArr[526] = 1383;
        iArr[527] = 1388;
        iArr[528] = 1393;
        iArr[529] = 1397;
        iArr[530] = 1402;
        iArr[531] = 1407;
        iArr[532] = 1411;
        iArr[533] = 1416;
        iArr[534] = 1421;
        iArr[535] = 1426;
        iArr[536] = 1430;
        iArr[537] = 1435;
        iArr[538] = 1440;
        iArr[539] = 1445;
        iArr[540] = 1450;
        iArr[541] = 1455;
        iArr[542] = 1459;
        iArr[543] = 1464;
        iArr[544] = 1469;
        iArr[545] = 1474;
        iArr[546] = 1479;
        iArr[547] = 1484;
        iArr[548] = 1489;
        iArr[549] = 1494;
        iArr[550] = 1499;
        iArr[551] = 1503;
        iArr[552] = 1508;
        iArr[553] = 1513;
        iArr[554] = 1518;
        iArr[555] = 1523;
        iArr[556] = 1528;
        iArr[557] = 1533;
        iArr[558] = 1538;
        iArr[559] = 1544;
        iArr[560] = 1549;
        iArr[561] = 1554;
        iArr[562] = 1559;
        iArr[563] = 1564;
        iArr[564] = 1569;
        iArr[565] = 1574;
        iArr[566] = 1579;
        iArr[567] = 1584;
        iArr[568] = 1590;
        iArr[569] = 1595;
        iArr[570] = 1600;
        iArr[571] = 1605;
        iArr[572] = 1610;
        iArr[573] = 1615;
        iArr[574] = 1621;
        iArr[575] = 1626;
        iArr[576] = 1631;
        iArr[577] = 1636;
        iArr[578] = 1642;
        iArr[579] = 1647;
        iArr[580] = 1652;
        iArr[581] = 1658;
        iArr[582] = 1663;
        iArr[583] = 1668;
        iArr[584] = 1674;
        iArr[585] = 1679;
        iArr[586] = 1685;
        iArr[587] = 1690;
        iArr[588] = 1695;
        iArr[589] = 1701;
        iArr[590] = 1706;
        iArr[591] = 1712;
        iArr[592] = 1717;
        iArr[593] = 1723;
        iArr[594] = 1728;
        iArr[595] = 1734;
        iArr[596] = 1739;
        iArr[597] = 1745;
        iArr[598] = 1750;
        iArr[599] = 1756;
        iArr[600] = 1761;
        iArr[601] = 1767;
        iArr[602] = 1773;
        iArr[603] = 1778;
        iArr[604] = 1784;
        iArr[605] = 1789;
        iArr[606] = 1795;
        iArr[607] = 1801;
        iArr[608] = 1806;
        iArr[609] = 1812;
        iArr[610] = 1818;
        iArr[611] = 1824;
        iArr[612] = 1829;
        iArr[613] = 1835;
        iArr[614] = 1841;
        iArr[615] = 1847;
        iArr[616] = 1852;
        iArr[617] = 1858;
        iArr[618] = 1864;
        iArr[619] = 1870;
        iArr[620] = 1876;
        iArr[621] = 1882;
        iArr[622] = 1888;
        iArr[623] = 1893;
        iArr[624] = 1899;
        iArr[625] = 1905;
        iArr[626] = 1911;
        iArr[627] = 1917;
        iArr[628] = 1923;
        iArr[629] = 1929;
        iArr[630] = 1935;
        iArr[631] = 1941;
        iArr[632] = 1947;
        iArr[633] = 1953;
        iArr[634] = 1959;
        iArr[635] = 1965;
        iArr[636] = 1971;
        iArr[637] = 1978;
        iArr[638] = 1984;
        iArr[639] = 1990;
        iArr[640] = 1996;
        iArr[641] = 2002;
        iArr[642] = 2008;
        iArr[643] = 2014;
        iArr[644] = 2021;
        iArr[645] = 2027;
        iArr[646] = 2033;
        iArr[647] = 2039;
        iArr[648] = 2046;
        iArr[649] = 2052;
        iArr[650] = 2058;
        iArr[651] = 2065;
        iArr[652] = 2071;
        iArr[653] = 2077;
        iArr[654] = 2084;
        iArr[655] = 2090;
        iArr[656] = 2096;
        iArr[657] = 2103;
        iArr[658] = 2109;
        iArr[659] = 2116;
        iArr[660] = 2122;
        iArr[661] = 2128;
        iArr[662] = 2135;
        iArr[663] = 2141;
        iArr[664] = 2148;
        iArr[665] = 2155;
        iArr[666] = 2161;
        iArr[667] = 2168;
        iArr[668] = 2174;
        iArr[669] = 2181;
        iArr[670] = 2187;
        iArr[671] = 2194;
        iArr[672] = 2201;
        iArr[673] = 2207;
        iArr[674] = 2214;
        iArr[675] = 2221;
        iArr[676] = 2227;
        iArr[677] = 2234;
        iArr[678] = 2241;
        iArr[679] = 2248;
        iArr[680] = 2254;
        iArr[681] = 2261;
        iArr[682] = 2268;
        iArr[683] = 2275;
        iArr[684] = 2282;
        iArr[685] = 2289;
        iArr[686] = 2295;
        iArr[687] = 2302;
        iArr[688] = 2309;
        iArr[689] = 2316;
        iArr[690] = 2323;
        iArr[691] = 2330;
        iArr[692] = 2337;
        iArr[693] = 2344;
        iArr[694] = 2351;
        iArr[695] = 2358;
        iArr[696] = 2365;
        iArr[697] = 2372;
        iArr[698] = 2379;
        iArr[699] = 2386;
        iArr[700] = 2393;
        iArr[701] = 2401;
        iArr[702] = 2408;
        iArr[703] = 2415;
        iArr[704] = 2422;
        iArr[705] = 2429;
        iArr[706] = 2436;
        iArr[707] = 2444;
        iArr[708] = 2451;
        iArr[709] = 2458;
        iArr[710] = 2465;
        iArr[711] = 2473;
        iArr[712] = 2480;
        iArr[713] = 2487;
        iArr[714] = 2495;
        iArr[715] = 2502;
        iArr[716] = 2510;
        iArr[717] = 2517;
        iArr[718] = 2524;
        iArr[719] = 2532;
        iArr[720] = 2539;
        iArr[721] = 2547;
        iArr[722] = 2554;
        iArr[723] = 2562;
        iArr[724] = 2569;
        iArr[725] = 2577;
        iArr[726] = 2585;
        iArr[727] = 2592;
        iArr[728] = 2600;
        iArr[729] = 2607;
        iArr[730] = 2615;
        iArr[731] = 2623;
        iArr[732] = 2630;
        iArr[733] = 2638;
        iArr[734] = 2646;
        iArr[735] = 2654;
        iArr[736] = 2661;
        iArr[737] = 2669;
        iArr[738] = 2677;
        iArr[739] = 2685;
        iArr[740] = 2693;
        iArr[741] = 2700;
        iArr[742] = 2708;
        iArr[743] = 2716;
        iArr[744] = 2724;
        iArr[745] = 2732;
        iArr[746] = 2740;
        iArr[747] = 2748;
        iArr[748] = 2756;
        iArr[749] = 2764;
        iArr[750] = 2772;
        iArr[751] = 2780;
        iArr[752] = 2788;
        iArr[753] = 2796;
        iArr[754] = 2804;
        iArr[755] = 2812;
        iArr[756] = 2821;
        iArr[757] = 2829;
        iArr[758] = 2837;
        iArr[759] = 2845;
        iArr[760] = 2853;
        iArr[761] = 2862;
        iArr[762] = 2870;
        iArr[763] = 2878;
        iArr[764] = 2886;
        iArr[765] = 2895;
        iArr[766] = 2903;
        iArr[767] = 2912;
        iArr[768] = 2920;
        iArr[769] = 2928;
        iArr[770] = 2937;
        iArr[771] = 2945;
        iArr[772] = 2954;
        iArr[773] = 2962;
        iArr[774] = 2971;
        iArr[775] = 2979;
        iArr[776] = 2988;
        iArr[777] = 2996;
        iArr[778] = 3005;
        iArr[779] = 3014;
        iArr[780] = 3022;
        iArr[781] = 3031;
        iArr[782] = 3040;
        iArr[783] = 3048;
        iArr[784] = 3057;
        iArr[785] = 3066;
        iArr[786] = 3075;
        iArr[787] = 3083;
        iArr[788] = 3092;
        iArr[789] = 3101;
        iArr[790] = 3110;
        iArr[791] = 3119;
        iArr[792] = 3128;
        iArr[793] = 3136;
        iArr[794] = 3145;
        iArr[795] = 3154;
        iArr[796] = 3163;
        iArr[797] = 3172;
        iArr[798] = 3181;
        iArr[799] = 3190;
        iArr[800] = 3200;
        iArr[801] = 3209;
        iArr[802] = 3218;
        iArr[803] = 3227;
        iArr[804] = 3236;
        iArr[805] = 3245;
        iArr[806] = 3254;
        iArr[807] = 3264;
        iArr[808] = 3273;
        iArr[809] = 3282;
        iArr[810] = 3291;
        iArr[811] = 3301;
        iArr[812] = 3310;
        iArr[813] = 3319;
        iArr[814] = 3329;
        iArr[815] = 3338;
        iArr[816] = 3348;
        iArr[817] = 3357;
        iArr[818] = 3367;
        iArr[819] = 3376;
        iArr[820] = 3386;
        iArr[821] = 3395;
        iArr[822] = 3405;
        iArr[823] = 3414;
        iArr[824] = 3424;
        iArr[825] = 3434;
        iArr[826] = 3443;
        iArr[827] = 3453;
        iArr[828] = 3463;
        iArr[829] = 3472;
        iArr[830] = 3482;
        iArr[831] = 3492;
        iArr[832] = 3502;
        iArr[833] = 3512;
        iArr[834] = 3521;
        iArr[835] = 3531;
        iArr[836] = 3541;
        iArr[837] = 3551;
        iArr[838] = 3561;
        iArr[839] = 3571;
        iArr[840] = 3581;
        iArr[841] = 3591;
        iArr[842] = 3601;
        iArr[843] = 3611;
        iArr[844] = 3621;
        iArr[845] = 3631;
        iArr[846] = 3641;
        iArr[847] = 3652;
        iArr[848] = 3662;
        iArr[849] = 3672;
        iArr[850] = 3682;
        iArr[851] = 3693;
        iArr[852] = 3703;
        iArr[853] = 3713;
        iArr[854] = 3724;
        iArr[855] = 3734;
        iArr[856] = 3744;
        iArr[857] = 3755;
        iArr[858] = 3765;
        iArr[859] = 3776;
        iArr[860] = 3786;
        iArr[861] = 3797;
        iArr[862] = 3807;
        iArr[863] = 3818;
        iArr[864] = 3828;
        iArr[865] = 3839;
        iArr[866] = 3850;
        iArr[867] = 3860;
        iArr[868] = 3871;
        iArr[869] = 3882;
        iArr[870] = 3892;
        iArr[871] = 3903;
        iArr[872] = 3914;
        iArr[873] = 3925;
        iArr[874] = 3936;
        iArr[875] = 3947;
        iArr[876] = 3958;
        iArr[877] = 3968;
        iArr[878] = 3979;
        iArr[879] = 3990;
        iArr[880] = 4001;
        iArr[881] = 4013;
        iArr[882] = 4024;
        iArr[883] = 4035;
        iArr[884] = 4046;
        iArr[885] = 4057;
        iArr[886] = 4068;
        iArr[887] = 4079;
        iArr[888] = 4091;
        iArr[889] = 4102;
        iArr[890] = 4113;
        iArr[891] = 4124;
        iArr[892] = 4136;
        iArr[893] = 4147;
        iArr[894] = 4159;
        iArr[895] = 4170;
        iArr[896] = 4181;
        iArr[897] = 4193;
        iArr[898] = 4204;
        iArr[899] = 4216;
        iArr[900] = 4228;
        iArr[901] = 4239;
        iArr[902] = 4251;
        iArr[903] = 4262;
        iArr[904] = 4274;
        iArr[905] = 4286;
        iArr[906] = 4298;
        iArr[907] = 4309;
        iArr[908] = 4321;
        iArr[909] = 4333;
        iArr[910] = 4345;
        iArr[911] = 4357;
        iArr[912] = 4369;
        iArr[913] = 4381;
        iArr[914] = 4392;
        iArr[915] = 4404;
        iArr[916] = 4417;
        iArr[917] = 4429;
        iArr[918] = 4441;
        iArr[919] = 4453;
        iArr[920] = 4465;
        iArr[921] = 4477;
        iArr[922] = 4489;
        iArr[923] = 4502;
        iArr[924] = 4514;
        iArr[925] = 4526;
        iArr[926] = 4538;
        iArr[927] = 4551;
        iArr[928] = 4563;
        iArr[929] = 4576;
        iArr[930] = 4588;
        iArr[931] = 4600;
        iArr[932] = 4613;
        iArr[933] = 4626;
        iArr[934] = 4638;
        iArr[935] = 4651;
        iArr[936] = 4663;
        iArr[937] = 4676;
        iArr[938] = 4689;
        iArr[939] = 4701;
        iArr[940] = 4714;
        iArr[941] = 4727;
        iArr[942] = 4740;
        iArr[943] = 4753;
        iArr[944] = 4765;
        iArr[945] = 4778;
        iArr[946] = 4791;
        iArr[947] = 4804;
        iArr[948] = 4817;
        iArr[949] = 4830;
        iArr[950] = 4843;
        iArr[951] = 4856;
        iArr[952] = 4870;
        iArr[953] = 4883;
        iArr[954] = 4896;
        iArr[955] = 4909;
        iArr[956] = 4922;
        iArr[957] = 4936;
        iArr[958] = 4949;
        iArr[959] = 4962;
        iArr[960] = 4976;
        iArr[961] = 4989;
        iArr[962] = 5003;
        iArr[963] = 5016;
        iArr[964] = 5030;
        iArr[965] = 5043;
        iArr[966] = 5057;
        iArr[967] = 5070;
        iArr[968] = 5084;
        iArr[969] = 5098;
        iArr[970] = 5111;
        iArr[971] = 5125;
        iArr[972] = 5139;
        iArr[973] = 5153;
        iArr[974] = 5167;
        iArr[975] = 5180;
        iArr[976] = 5194;
        iArr[977] = 5208;
        iArr[978] = 5222;
        iArr[979] = 5236;
        iArr[980] = 5250;
        iArr[981] = 5264;
        iArr[982] = 5279;
        iArr[983] = 5293;
        iArr[984] = 5307;
        iArr[985] = 5321;
        iArr[986] = 5335;
        iArr[987] = 5350;
        iArr[988] = 5364;
        iArr[989] = 5378;
        iArr[990] = 5393;
        iArr[991] = 5407;
        iArr[992] = 5422;
        iArr[993] = 5436;
        iArr[994] = 5451;
        iArr[995] = 5465;
        iArr[996] = 5480;
        iArr[997] = 5495;
        iArr[998] = 5509;
        iArr[999] = 5524;
        iArr[1000] = 5539;
        iArr[1001] = 5554;
        iArr[1002] = 5568;
        iArr[1003] = 5583;
        iArr[1004] = 5598;
        iArr[1005] = 5613;
        iArr[1006] = 5628;
        iArr[1007] = 5643;
        iArr[1008] = 5658;
        iArr[1009] = 5673;
        iArr[1010] = 5688;
        iArr[1011] = 5703;
        iArr[1012] = 5719;
        iArr[1013] = 5734;
        iArr[1014] = 5749;
        iArr[1015] = 5764;
        iArr[1016] = 5780;
        iArr[1017] = 5795;
        iArr[1018] = 5810;
        iArr[1019] = 5826;
        iArr[1020] = 5841;
        iArr[1021] = 5857;
        iArr[1022] = 5873;
        iArr[1023] = 5888;
        iArr[1024] = 5904;
        iArr[1025] = 5919;
        iArr[1026] = 5935;
        iArr[1027] = 5951;
        iArr[1028] = 5967;
        iArr[1029] = 5983;
        iArr[1030] = 5998;
        iArr[1031] = 6014;
        iArr[1032] = 6030;
        iArr[1033] = 6046;
        iArr[1034] = 6062;
        iArr[1035] = 6078;
        iArr[1036] = 6094;
        iArr[1037] = 6111;
        iArr[1038] = 6127;
        iArr[1039] = 6143;
        iArr[1040] = 6159;
        iArr[1041] = 6176;
        iArr[1042] = 6192;
        iArr[1043] = 6208;
        iArr[1044] = 6225;
        iArr[1045] = 6241;
        iArr[1046] = 6258;
        iArr[1047] = 6274;
        iArr[1048] = 6291;
        iArr[1049] = 6307;
        iArr[1050] = 6324;
        iArr[1051] = 6341;
        iArr[1052] = 6357;
        iArr[1053] = 6374;
        iArr[1054] = 6391;
        iArr[1055] = 6408;
        iArr[1056] = 6425;
        iArr[1057] = 6442;
        iArr[1058] = 6459;
        iArr[1059] = 6476;
        iArr[1060] = 6493;
        iArr[1061] = 6510;
        iArr[1062] = 6527;
        iArr[1063] = 6544;
        iArr[1064] = 6562;
        iArr[1065] = 6579;
        iArr[1066] = 6596;
        iArr[1067] = 6614;
        iArr[1068] = 6631;
        iArr[1069] = 6648;
        iArr[1070] = 6666;
        iArr[1071] = 6683;
        iArr[1072] = 6701;
        iArr[1073] = 6719;
        iArr[1074] = 6736;
        iArr[1075] = 6754;
        iArr[1076] = 6772;
        iArr[1077] = 6790;
        iArr[1078] = 6807;
        iArr[1079] = 6825;
        iArr[1080] = 6843;
        iArr[1081] = 6861;
        iArr[1082] = 6879;
        iArr[1083] = 6897;
        iArr[1084] = 6915;
        iArr[1085] = 6933;
        iArr[1086] = 6952;
        iArr[1087] = 6970;
        iArr[1088] = 6988;
        iArr[1089] = 7006;
        iArr[1090] = 7025;
        iArr[1091] = 7043;
        iArr[1092] = 7062;
        iArr[1093] = 7080;
        iArr[1094] = 7099;
        iArr[1095] = 7117;
        iArr[1096] = 7136;
        iArr[1097] = 7155;
        iArr[1098] = 7173;
        iArr[1099] = 7192;
        iArr[1100] = 7211;
        iArr[1101] = 7230;
        iArr[1102] = 7249;
        iArr[1103] = 7268;
        iArr[1104] = 7287;
        iArr[1105] = 7306;
        iArr[1106] = 7325;
        iArr[1107] = 7344;
        iArr[1108] = 7363;
        iArr[1109] = 7382;
        iArr[1110] = 7402;
        iArr[1111] = 7421;
        iArr[1112] = 7440;
        iArr[1113] = 7460;
        iArr[1114] = 7479;
        iArr[1115] = 7499;
        iArr[1116] = 7518;
        iArr[1117] = 7538;
        iArr[1118] = 7558;
        iArr[1119] = 7577;
        iArr[1120] = 7597;
        iArr[1121] = 7617;
        iArr[1122] = 7637;
        iArr[1123] = 7657;
        iArr[1124] = 7677;
        iArr[1125] = 7697;
        iArr[1126] = 7717;
        iArr[1127] = 7737;
        iArr[1128] = 7757;
        iArr[1129] = 7777;
        iArr[1130] = 7797;
        iArr[1131] = 7818;
        iArr[1132] = 7838;
        iArr[1133] = 7858;
        iArr[1134] = 7879;
        iArr[1135] = 7899;
        iArr[1136] = 7920;
        iArr[1137] = 7940;
        iArr[1138] = 7961;
        iArr[1139] = 7982;
        iArr[1140] = 8002;
        iArr[1141] = 8023;
        iArr[1142] = 8044;
        iArr[1143] = 8065;
        iArr[1144] = 8086;
        iArr[1145] = 8107;
        iArr[1146] = 8128;
        iArr[1147] = 8149;
        iArr[1148] = 8170;
        iArr[1149] = 8191;
        iArr[1150] = 8213;
        iArr[1151] = 8234;
        iArr[1152] = 8255;
        iArr[1153] = 8277;
        iArr[1154] = 8298;
        iArr[1155] = 8320;
        iArr[1156] = 8341;
        iArr[1157] = 8363;
        iArr[1158] = 8384;
        iArr[1159] = 8406;
        iArr[1160] = 8428;
        iArr[1161] = 8450;
        iArr[1162] = 8472;
        iArr[1163] = 8494;
        iArr[1164] = 8515;
        iArr[1165] = 8538;
        iArr[1166] = 8560;
        iArr[1167] = 8582;
        iArr[1168] = 8604;
        iArr[1169] = 8626;
        iArr[1170] = 8649;
        iArr[1171] = 8671;
        iArr[1172] = 8693;
        iArr[1173] = 8716;
        iArr[1174] = 8738;
        iArr[1175] = 8761;
        iArr[1176] = 8784;
        iArr[1177] = 8806;
        iArr[1178] = 8829;
        iArr[1179] = 8852;
        iArr[1180] = 8875;
        iArr[1181] = 8898;
        iArr[1182] = 8921;
        iArr[1183] = 8944;
        iArr[1184] = 8967;
        iArr[1185] = 8990;
        iArr[1186] = 9013;
        iArr[1187] = 9036;
        iArr[1188] = 9059;
        iArr[1189] = 9083;
        iArr[1190] = 9106;
        iArr[1191] = 9130;
        iArr[1192] = 9153;
        iArr[1193] = 9177;
        iArr[1194] = 9201;
        iArr[1195] = 9224;
        iArr[1196] = 9248;
        iArr[1197] = 9272;
        iArr[1198] = 9296;
        iArr[1199] = 9320;
        iArr[1200] = 9344;
        iArr[1201] = 9368;
        iArr[1202] = 9392;
        iArr[1203] = 9416;
        iArr[1204] = 9440;
        iArr[1205] = 9465;
        iArr[1206] = 9489;
        iArr[1207] = 9513;
        iArr[1208] = 9538;
        iArr[1209] = 9562;
        iArr[1210] = 9587;
        iArr[1211] = 9611;
        iArr[1212] = 9636;
        iArr[1213] = 9661;
        iArr[1214] = 9686;
        iArr[1215] = 9711;
        iArr[1216] = 9736;
        iArr[1217] = 9761;
        iArr[1218] = 9786;
        iArr[1219] = 9811;
        iArr[1220] = 9836;
        iArr[1221] = 9861;
        iArr[1222] = 9887;
        iArr[1223] = 9912;
        iArr[1224] = 9937;
        iArr[1225] = 9963;
        iArr[1226] = 9988;
        iArr[1227] = 10014;
        iArr[1228] = 10040;
        iArr[1229] = 10066;
        iArr[1230] = 10091;
        iArr[1231] = 10117;
        iArr[1232] = 10143;
        iArr[1233] = 10169;
        iArr[1234] = 10195;
        iArr[1235] = 10221;
        iArr[1236] = 10248;
        iArr[1237] = 10274;
        iArr[1238] = 10300;
        iArr[1239] = 10327;
        iArr[1240] = 10353;
        iArr[1241] = 10379;
        iArr[1242] = 10406;
        iArr[1243] = 10433;
        iArr[1244] = 10459;
        iArr[1245] = 10486;
        iArr[1246] = 10513;
        iArr[1247] = 10540;
        iArr[1248] = 10567;
        iArr[1249] = 10594;
        iArr[1250] = 10621;
        iArr[1251] = 10648;
        iArr[1252] = 10675;
        iArr[1253] = 10703;
        iArr[1254] = 10730;
        iArr[1255] = 10758;
        iArr[1256] = 10785;
        iArr[1257] = 10813;
        iArr[1258] = 10840;
        iArr[1259] = 10868;
        iArr[1260] = 10896;
        iArr[1261] = 10924;
        iArr[1262] = 10951;
        iArr[1263] = 10979;
        iArr[1264] = 11007;
        iArr[1265] = 11036;
        iArr[1266] = 11064;
        iArr[1267] = 11092;
        iArr[1268] = 11120;
        iArr[1269] = 11149;
        iArr[1270] = 11177;
        iArr[1271] = 11206;
        iArr[1272] = 11234;
        iArr[1273] = 11263;
        iArr[1274] = 11292;
        iArr[1275] = 11320;
        iArr[1276] = 11349;
        iArr[1277] = 11378;
        iArr[1278] = 11407;
        iArr[1279] = 11436;
        iArr[1280] = 11465;
        iArr[1281] = 11495;
        iArr[1282] = 11524;
        iArr[1283] = 11553;
        iArr[1284] = 11583;
        iArr[1285] = 11612;
        iArr[1286] = 11642;
        iArr[1287] = 11672;
        iArr[1288] = 11701;
        iArr[1289] = 11731;
        iArr[1290] = 11761;
        iArr[1291] = 11791;
        iArr[1292] = 11821;
        iArr[1293] = 11851;
        iArr[1294] = 11881;
        iArr[1295] = 11911;
        iArr[1296] = 11942;
        iArr[1297] = 11972;
        iArr[1298] = 12002;
        iArr[1299] = 12033;
        iArr[1300] = 12064;
        iArr[1301] = 12094;
        iArr[1302] = 12125;
        iArr[1303] = 12156;
        iArr[1304] = 12187;
        iArr[1305] = 12218;
        iArr[1306] = 12249;
        iArr[1307] = 12280;
        iArr[1308] = 12311;
        iArr[1309] = 12342;
        iArr[1310] = 12374;
        iArr[1311] = 12405;
        iArr[1312] = 12437;
        iArr[1313] = 12468;
        iArr[1314] = 12500;
        iArr[1315] = 12532;
        iArr[1316] = 12564;
        iArr[1317] = 12595;
        iArr[1318] = 12627;
        iArr[1319] = 12659;
        iArr[1320] = 12692;
        iArr[1321] = 12724;
        iArr[1322] = 12756;
        iArr[1323] = 12788;
        iArr[1324] = 12821;
        iArr[1325] = 12853;
        iArr[1326] = 12886;
        iArr[1327] = 12919;
        iArr[1328] = 12951;
        iArr[1329] = 12984;
        iArr[1330] = 13017;
        iArr[1331] = 13050;
        iArr[1332] = 13083;
        iArr[1333] = 13117;
        iArr[1334] = 13150;
        iArr[1335] = 13183;
        iArr[1336] = 13216;
        iArr[1337] = 13250;
        iArr[1338] = 13284;
        iArr[1339] = 13317;
        iArr[1340] = 13351;
        iArr[1341] = 13385;
        iArr[1342] = 13419;
        iArr[1343] = 13453;
        iArr[1344] = 13487;
        iArr[1345] = 13521;
        iArr[1346] = 13555;
        iArr[1347] = 13589;
        iArr[1348] = 13624;
        iArr[1349] = 13658;
        iArr[1350] = 13693;
        iArr[1351] = 13727;
        iArr[1352] = 13762;
        iArr[1353] = 13797;
        iArr[1354] = 13832;
        iArr[1355] = 13867;
        iArr[1356] = 13902;
        iArr[1357] = 13937;
        iArr[1358] = 13972;
        iArr[1359] = 14008;
        iArr[1360] = 14043;
        iArr[1361] = 14079;
        iArr[1362] = 14114;
        iArr[1363] = 14150;
        iArr[1364] = 14186;
        iArr[1365] = 14221;
        iArr[1366] = 14257;
        iArr[1367] = 14293;
        iArr[1368] = 14330;
        iArr[1369] = 14366;
        iArr[1370] = 14402;
        iArr[1371] = 14438;
        iArr[1372] = 14475;
        iArr[1373] = 14511;
        iArr[1374] = 14548;
        iArr[1375] = 14585;
        iArr[1376] = 14622;
        iArr[1377] = 14658;
        iArr[1378] = 14695;
        iArr[1379] = 14733;
        iArr[1380] = 14770;
        iArr[1381] = 14807;
        iArr[1382] = 14844;
        iArr[1383] = 14882;
        iArr[1384] = 14919;
        iArr[1385] = 14957;
        iArr[1386] = 14995;
        iArr[1387] = 15033;
        iArr[1388] = 15070;
        iArr[1389] = 15108;
        iArr[1390] = 15147;
        iArr[1391] = 15185;
        iArr[1392] = 15223;
        iArr[1393] = 15261;
        iArr[1394] = 15300;
        iArr[1395] = 15338;
        iArr[1396] = 15377;
        iArr[1397] = 15416;
        iArr[1398] = 15455;
        iArr[1399] = 15494;
        iArr[1400] = 15533;
        iArr[1401] = 15572;
        iArr[1402] = 15611;
        iArr[1403] = 15650;
        iArr[1404] = 15690;
        iArr[1405] = 15729;
        iArr[1406] = 15769;
        iArr[1407] = 15809;
        iArr[1408] = 15848;
        iArr[1409] = 15888;
        iArr[1410] = 15928;
        iArr[1411] = 15968;
        iArr[1412] = 16009;
        iArr[1413] = 16049;
        iArr[1414] = 16089;
        iArr[1415] = 16130;
        iArr[1416] = 16170;
        iArr[1417] = 16211;
        iArr[1418] = 16252;
        iArr[1419] = 16293;
        iArr[1420] = 16334;
        iArr[1421] = 16375;
        iArr[1422] = 16416;
        iArr[1423] = 16457;
        iArr[1424] = 16498;
        iArr[1425] = 16540;
        iArr[1426] = 16582;
        iArr[1427] = 16623;
        iArr[1428] = 16665;
        iArr[1429] = 16707;
        iArr[1430] = 16749;
        iArr[1431] = 16791;
        iArr[1432] = 16833;
        iArr[1433] = 16875;
        iArr[1434] = 16918;
        iArr[1435] = 16960;
        iArr[1436] = 17003;
        iArr[1437] = 17046;
        iArr[1438] = 17088;
        iArr[1439] = 17131;
        iArr[1440] = 17174;
        iArr[1441] = 17218;
        iArr[1442] = 17261;
        iArr[1443] = 17304;
        iArr[1444] = 17348;
        iArr[1445] = 17391;
        iArr[1446] = 17435;
        iArr[1447] = 17478;
        iArr[1448] = 17522;
        iArr[1449] = 17566;
        iArr[1450] = 17610;
        iArr[1451] = 17655;
        iArr[1452] = 17699;
        iArr[1453] = 17743;
        iArr[1454] = 17788;
        iArr[1455] = 17832;
        iArr[1456] = 17877;
        iArr[1457] = 17922;
        iArr[1458] = 17967;
        iArr[1459] = 18012;
        iArr[1460] = 18057;
        iArr[1461] = 18102;
        iArr[1462] = 18148;
        iArr[1463] = 18193;
        iArr[1464] = 18239;
        iArr[1465] = 18285;
        iArr[1466] = 18330;
        iArr[1467] = 18376;
        iArr[1468] = 18422;
        iArr[1469] = 18469;
        iArr[1470] = 18515;
        iArr[1471] = 18561;
        iArr[1472] = 18608;
        iArr[1473] = 18654;
        iArr[1474] = 18701;
        iArr[1475] = 18748;
        iArr[1476] = 18795;
        iArr[1477] = 18842;
        iArr[1478] = 18889;
        iArr[1479] = 18937;
        iArr[1480] = 18984;
        iArr[1481] = 19031;
        iArr[1482] = 19079;
        iArr[1483] = 19127;
        iArr[1484] = 19175;
        iArr[1485] = 19223;
        iArr[1486] = 19271;
        iArr[1487] = 19319;
        iArr[1488] = 19367;
        iArr[1489] = 19416;
        iArr[1490] = 19465;
        iArr[1491] = 19513;
        iArr[1492] = 19562;
        iArr[1493] = 19611;
        iArr[1494] = 19660;
        iArr[1495] = 19709;
        iArr[1496] = 19759;
        iArr[1497] = 19808;
        iArr[1498] = 19857;
        iArr[1499] = 19907;
        iArr[1500] = 19957;
        iArr[1501] = 20007;
        iArr[1502] = 20057;
        iArr[1503] = 20107;
        iArr[1504] = 20157;
        iArr[1505] = 20208;
        iArr[1506] = 20258;
        iArr[1507] = 20309;
        iArr[1508] = 20360;
        iArr[1509] = 20410;
        iArr[1510] = 20461;
        iArr[1511] = 20513;
        iArr[1512] = 20564;
        iArr[1513] = 20615;
        iArr[1514] = 20667;
        iArr[1515] = 20718;
        iArr[1516] = 20770;
        iArr[1517] = 20822;
        iArr[1518] = 20874;
        iArr[1519] = 20926;
        iArr[1520] = 20978;
        iArr[1521] = 21031;
        iArr[1522] = 21083;
        iArr[1523] = 21136;
        iArr[1524] = 21189;
        iArr[1525] = 21242;
        iArr[1526] = 21295;
        iArr[1527] = 21348;
        iArr[1528] = 21401;
        iArr[1529] = 21455;
        iArr[1530] = 21508;
        iArr[1531] = 21562;
        iArr[1532] = 21616;
        iArr[1533] = 21669;
        iArr[1534] = 21724;
        iArr[1535] = 21778;
        iArr[1536] = 21832;
        iArr[1537] = 21887;
        iArr[1538] = 21941;
        iArr[1539] = 21996;
        iArr[1540] = 22051;
        iArr[1541] = 22106;
        iArr[1542] = 22161;
        iArr[1543] = 22216;
        iArr[1544] = 22272;
        iArr[1545] = 22327;
        iArr[1546] = 22383;
        iArr[1547] = 22439;
        iArr[1548] = 22495;
        iArr[1549] = 22551;
        iArr[1550] = 22607;
        iArr[1551] = 22663;
        iArr[1552] = 22720;
        iArr[1553] = 22776;
        iArr[1554] = 22833;
        iArr[1555] = 22890;
        iArr[1556] = 22947;
        iArr[1557] = 23004;
        iArr[1558] = 23062;
        iArr[1559] = 23119;
        iArr[1560] = 23177;
        iArr[1561] = 23234;
        iArr[1562] = 23292;
        iArr[1563] = 23350;
        iArr[1564] = 23408;
        iArr[1565] = 23467;
        iArr[1566] = 23525;
        iArr[1567] = 23584;
        iArr[1568] = 23643;
        iArr[1569] = 23701;
        iArr[1570] = 23760;
        iArr[1571] = 23820;
        iArr[1572] = 23879;
        iArr[1573] = 23938;
        iArr[1574] = 23998;
        iArr[1575] = 24058;
        iArr[1576] = 24118;
        iArr[1577] = 24178;
        iArr[1578] = 24238;
        iArr[1579] = 24298;
        iArr[1580] = 24359;
        iArr[1581] = 24419;
        iArr[1582] = 24480;
        iArr[1583] = 24541;
        iArr[1584] = 24602;
        iArr[1585] = 24663;
        iArr[1586] = 24725;
        iArr[1587] = 24786;
        iArr[1588] = 24848;
        iArr[1589] = 24910;
        iArr[1590] = 24972;
        iArr[1591] = 25034;
        iArr[1592] = 25096;
        iArr[1593] = 25158;
        iArr[1594] = 25221;
        iArr[1595] = 25284;
        iArr[1596] = 25346;
        iArr[1597] = 25409;
        iArr[1598] = 25473;
        iArr[1599] = 25536;
        iArr[1600] = 25600;
        EXP_TABLE = iArr;
        iArr = new int[7];
        iArr[0] = -VALID_MAX;
        iArr[1] = ((-VALID_MAX) * 2) / 3;
        iArr[2] = (-VALID_MAX) / 3;
        iArr[4] = VALID_MAX / 3;
        iArr[5] = (VALID_MAX * 2) / 3;
        iArr[6] = VALID_MAX;
        THRO_CURVE_XPOS = iArr;
    }

    public CurveSurfaceView(Context context) {
        super(context);
        getHolder().addCallback(this);
        setFocusable(true);
        setFocusableInTouchMode(true);
        setLongClickable(true);
        setBackgroundColor(-1);
    }

    public CurveSurfaceView(Context context, AttributeSet attrs) {
        super(context, attrs);
        getHolder().addCallback(this);
        setFocusable(true);
        setFocusableInTouchMode(true);
        setLongClickable(true);
        setBackgroundColor(-1);
    }

    public static void init() {
        f1w = LogoSurfaceView.f3w;
        f0h = LogoSurfaceView.f2h;
        yhalf = f0h / 2;
        xhalf = f1w / 2;
        xleft = 0;
        xright = f1w;
        ytop = 0;
        ybottom = f0h;
        scales = LogoSurfaceView.scales;
        if (f1w < 320 || f0h < 320) {
            fix = 10;
            w0 = 200;
        } else {
            fix = 10;
            w0 = 200;
        }
        paint = new Paint();
        paint.setAntiAlias(true);
        paint.setColor(-32768);
        paint.setTextSize(16.0f * scales);
    }

    public int CountExp(int input) {
        if (helm_adjustb != 0 || helm_adjusts != 0) {
            boolean sign = false;
            if (input >= 0) {
                sign = true;
            }
            int perc;
            int value;
            int exp;
            if (sign) {
                perc = helm_adjustb;
                value = input;
                if (perc > 0) {
                    exp = EXP_TABLE[value];
                } else {
                    perc = 0 - perc;
                    exp = EXP_TABLE[1600] - EXP_TABLE[1600 - value];
                }
                return (helm_max * ((((value * 16) * (100 - perc)) + (exp * perc)) / 1600)) / DUAL_RATE_DEF;
            }
            perc = helm_adjusts;
            value = 0 - input;
            if (perc > 0) {
                exp = EXP_TABLE[value];
            } else {
                perc = 0 - perc;
                exp = EXP_TABLE[1600] - EXP_TABLE[1600 - value];
            }
            input = (((value * 16) * (100 - perc)) + (exp * perc)) / 1600;
            if (!sign) {
                input = 0 - input;
            }
            return (helm_min * input) / DUAL_RATE_DEF;
        } else if (input >= 0) {
            return (helm_max * input) / DUAL_RATE_DEF;
        } else {
            return (helm_min * input) / DUAL_RATE_DEF;
        }
    }

    public int GetCalculateValue(int input, int total, int[] x_buf, int[] y_buf, int[] k_buf, boolean exp_en) {
        int output;
        int[] curve_x = new int[2];
        int[] curve_y = new int[2];
        int numb = 0;
        for (int i = 0; i < total; i++) {
            if (input > x_buf[i]) {
                numb = i;
            }
        }
        curve_x[0] = x_buf[numb];
        curve_x[1] = x_buf[numb + 1];
        curve_y[0] = y_buf[numb];
        curve_y[1] = y_buf[numb + 1];
        int curve_k = k_buf[numb];
        if (exp_en) {
            int k0;
            int k2;
            int left;
            int right;
            int dx;
            int dy;
            int value;
            int scale;
            int k1 = curve_k;
            if (numb == 0) {
                k0 = k1;
            } else {
                k0 = k_buf[numb - 1];
            }
            if (numb + 1 == total - 1) {
                k2 = k1;
            } else {
                k2 = k_buf[numb + 1];
            }
            if ((k1 <= 0 || k0 > 0) && (k1 >= 0 || k0 < 0)) {
                if (k0 == 0 && k1 == 0) {
                    left = 0;
                } else {
                    left = ((k1 - k0) * 100) / (k0 + k1);
                }
                if (left > 100) {
                    left = 100;
                }
                if (left < -100) {
                    left = -100;
                }
            } else {
                left = 100;
            }
            if ((k1 <= 0 || k2 > 0) && (k1 >= 0 || k2 < 0)) {
                if (k1 == 0 && k2 == 0) {
                    right = 0;
                } else {
                    right = ((k1 - k2) * 100) / (k1 + k2);
                }
                if (right > 100) {
                    right = 100;
                }
                if (right < -100) {
                    right = -100;
                }
            } else {
                right = 100;
            }
            if ((left <= 0 || right >= 0) && (left >= 0 || right <= 0)) {
                dx = left + right;
                if (dx == 0) {
                    dy = curve_y[0];
                    dx = curve_x[0];
                } else {
                    dy = (((curve_y[1] - curve_y[0]) * left) / dx) + curve_y[0];
                    dx = (((curve_x[1] - curve_x[0]) * left) / dx) + curve_x[0];
                }
            } else {
                if (Math.abs(left) > Math.abs(right)) {
                    dx = curve_x[1];
                    dy = curve_y[1];
                } else {
                    dx = curve_x[0];
                    dy = curve_y[0];
                }
            }
            boolean status = false;
            if (input >= dx) {
                curve_k = right;
                curve_x[0] = dx;
                curve_y[0] = dy;
            } else {
                status = true;
                curve_k = left;
                curve_x[1] = dx;
                curve_y[1] = dy;
            }
            if (input == dx) {
                dx = 0;
            } else {
                dx = ((input - curve_x[0]) * VALID_MAX) / (curve_x[1] - curve_x[0]);
            }
            dy = curve_y[1] - curve_y[0];
            if (status) {
                value = (dx * dx) / VALID_MAX;
                scale = VALID_MAX - ((dx * 3) / 4);
            } else {
                value = (((VALID_MAX * 2) - dx) * dx) / VALID_MAX;
                scale = (VALID_MAX / 4) + ((dx * 3) / 4);
            }
            output = ((((dx * 100) + ((((value - dx) * scale) / VALID_MAX) * curve_k)) * dy) / VALID_MAX) / 100;
        } else {
            output = (curve_k * (input - curve_x[0])) / 100;
        }
        return curve_y[0] + output;
    }

    public int GetThroCurveValue(int input, int trim_value, boolean[] ch_en, float[] ch_out, boolean exp_en) {
        int[] x_buf = new int[CURVE_POINT_NUM];
        int[] y_buf = new int[CURVE_POINT_NUM];
        int[] k_buf = new int[CURVE_POINT_NUM];
        int total = 0;
        for (int i = 0; i < CURVE_POINT_NUM; i++) {
            if (ch_en[i]) {
                x_buf[total] = THRO_CURVE_XPOS[i];
                y_buf[total] = (int) ((ch_out[i] * ((float) VALID_MAX)) / ((float) CURVE_POINT_MAX));
                if (total > 0) {
                    int temp = total - 1;
                    k_buf[temp] = ((y_buf[total] - y_buf[temp]) * 100) / (x_buf[total] - x_buf[temp]);
                } else {
                    y_buf[0] = y_buf[0] + trim_value;
                }
                total++;
            }
        }
        return GetCalculateValue(input, total, x_buf, y_buf, k_buf, exp_en);
    }

    public void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        paint.setColor(-65536);
        canvas.drawLine(0.0f, 0.0f, 0.0f, (float) (w0 * 2), paint);
        canvas.drawLine(0.0f, 0.0f, (float) (w0 * 2), 0.0f, paint);
        canvas.drawLine((float) (w0 * 2), 0.0f, (float) (w0 * 2), (float) (w0 * 2), paint);
        canvas.drawLine(0.0f, (float) (w0 * 2), (float) (w0 * 2), (float) (w0 * 2), paint);
        canvas.drawLine(0.0f, (float) w0, (float) (w0 * 2), (float) w0, paint);
        canvas.drawLine((float) w0, 0.0f, (float) w0, (float) (w0 * 2), paint);
        paint.setColor(-16711936);
        canvas.drawText("Input", ((float) (w0 * 2)) - (45.0f * scales), (float) (f0h / 2), paint);
        canvas.drawText("Output", (float) w0, scales * 15.0f, paint);
        paint.setColor(-32768);
        if (!elevhelm) {
            return;
        }
        int i;
        int j;
        int k;
        if (RunSurfaceView.helmFlag == 0) {
            helm_max = RunSurfaceView.BarHelmbe;
            helm_min = RunSurfaceView.BarHelmse;
            helm_adjustb = RunSurfaceView.BarBEE;
            helm_adjusts = RunSurfaceView.BarSEE;
            canvas.drawText("ELEV", (float) w0, ((float) w0) + (scales * 15.0f), paint);
            for (i = -VALID_MAX; i <= VALID_MAX; i++) {
                j = i;
                k = CountExp(j);
                if (i % fix == 0) {
                    canvas.drawPoint((float) (w0 + (j / fix)), (float) (w0 - (k / fix)), paint);
                }
            }
        } else if (RunSurfaceView.helmFlag == 1) {
            helm_max = RunSurfaceView.BarHelmba;
            helm_min = RunSurfaceView.BarHelmsa;
            helm_adjustb = RunSurfaceView.BarBEA;
            helm_adjusts = RunSurfaceView.BarSEA;
            canvas.drawText("AILE", (float) w0, ((float) w0) + (scales * 15.0f), paint);
            for (i = -VALID_MAX; i <= VALID_MAX; i++) {
                j = i;
                k = CountExp(j);
                if (i % fix == 0) {
                    canvas.drawPoint((float) (w0 + (j / fix)), (float) (w0 - (k / fix)), paint);
                }
            }
        } else if (RunSurfaceView.helmFlag == 2) {
            helm_max = RunSurfaceView.BarHelmbr;
            helm_min = RunSurfaceView.BarHelmsr;
            helm_adjustb = RunSurfaceView.BarBER;
            helm_adjusts = RunSurfaceView.BarSER;
            canvas.drawText("RUDD", (float) w0, ((float) w0) + (scales * 15.0f), paint);
            for (i = -VALID_MAX; i <= VALID_MAX; i++) {
                j = i;
                k = CountExp(j);
                if (i % fix == 0) {
                    canvas.drawPoint((float) (w0 + (j / fix)), (float) (w0 - (k / fix)), paint);
                }
            }
        } else if (RunSurfaceView.helmFlag == 3) {
            helm_max = RunSurfaceView.BarHelmbt;
            helm_min = RunSurfaceView.BarHelmst;
            helm_adjustb = RunSurfaceView.BarBET;
            helm_adjusts = RunSurfaceView.BarSET;
            canvas.drawText("THRO", (float) w0, ((float) w0) + (scales * 15.0f), paint);
            for (i = -VALID_MAX; i <= VALID_MAX; i++) {
                j = i;
                k = CountExp(j);
                if (i % fix == 0) {
                    canvas.drawPoint((float) (w0 + (j / fix)), (float) (w0 - (k / fix)), paint);
                }
            }
        }
    }

    public boolean onKeyDown(int keyCode, KeyEvent e) {
        return super.onKeyDown(keyCode, e);
    }

    public boolean onTouchEvent(MotionEvent event) {
        return super.onTouchEvent(event);
    }

    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
    }

    public void surfaceCreated(SurfaceHolder holder) {
        invalidate();
    }

    public void surfaceDestroyed(SurfaceHolder holder) {
    }
}
